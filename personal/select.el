(defun sl/select-current-indent  ()
  (when (and
         (not (sl/current-line-empty-p))
         (= 0 (current-indentation)))
    (throw 'mark-all -1))
  (setq sl/start-indent (current-indentation))
  (push-mark (point) t t)
  (sl/moving sl/start-indent -1)
  (forward-line)
  (exchange-point-and-mark)
  (sl/moving sl/start-indent 1)
  (forward-line -1)
  (end-of-line))

(defun sl/select-previous-indent (beg)
  (goto-char beg)
     (when (and
            (not (sl/current-line-empty-p))
            (= 0 (current-indentation)))
       (throw 'mark-all -1))
     (setq sl/start-indent (current-indentation))
     (sl/moving sl/start-indent -1)
     (push-mark (point) t t)
     (setq sl/top-indent (current-indentation))
     (forward-line)
     (setq sl/start-indent (current-indentation))
     (sl/moving (+ sl/top-indent 1) 1)
     (when (< (current-indentation) sl/top-indent)
       (forward-line -1))
     )
(defun sl/moving (indent forward)
  (while (and (or (>= (current-indentation) indent)
                  (sl/current-line-empty-p))
              (= (forward-line forward) 0)
              ))
  (if (= forward 1)
      (end-of-line)
    (beginning-of-line)
      )
  )
(defun sl/current-line-empty-p ()
  (save-excursion
    (beginning-of-line)
    (looking-at "[[:space:]]*$")))

(defun sl/expand-indent-selection (beg end)
  "message region or \"empty string\" if none highlighted"
  (interactive (if (use-region-p)
                   (list (region-beginning) (region-end))
                 (list nil nil)))
  (when (eq -1 (catch 'mark-all
    (if (and beg end)
        (sl/select-previous-indent beg)
      (sl/select-current-indent))))
    (mark-whole-buffer)
    ))
